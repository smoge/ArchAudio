--- SConstruct.old	2011-01-11 20:04:45.896673059 -0200
+++ SConstruct	2011-01-11 20:05:34.533339531 -0200
@@ -57,7 +57,7 @@
     elif sys.platform[:6] == 'darwin':
         return 'darwin'
     elif sys.platform[:5] == 'sunos':
-        return 'sunos'    
+        return 'sunos'
     else:
         return 'unsupported'
 
@@ -232,7 +232,7 @@
     '0')
 commandOptions.Add('withSunStudio',
     'On Solaris, set to 1 to build with Sun Studio, or set to 0 to build with gcc',
-    '1')    
+    '1')
 commandOptions.Add('buildNewParser',
     'Enable building new parser (requires Flex/Bison)',
     '0')
@@ -261,13 +261,13 @@
     'Set to 8.4 or 8.5',
     '8.4')
 commandOptions.Add('includeMP3',
-     'Set to 1 if using mpadec', 
+     'Set to 1 if using mpadec',
      '0')
 commandOptions.Add('includeWii',
-     'Set to 1 if using libwiimote', 
+     'Set to 1 if using libwiimote',
      '0')
 commandOptions.Add('includeP5Glove',
-     'Set to 1 if using P5 Glove', 
+     'Set to 1 if using P5 Glove',
      '0')
 
 # Define the common part of the build environment.
@@ -288,12 +288,12 @@
         return True
     else:
         return False
-        
+
 def compilerSun():
     if getPlatform() == 'sunos' and commonEnvironment['withSunStudio'] == '1':
         return True
     else:
-        return False        
+        return False
 
 def compilerGNU():
     if not compilerIntel() and not compilerMicrosoft() and not compilerSun():
@@ -403,7 +403,7 @@
     if compilerSun():
         print "Build platform is Sun Studio."
     elif compilerGNU():
-        print "Build platform is '" + getPlatform() + "'."        
+        print "Build platform is '" + getPlatform() + "'."
 else:
     if compilerMicrosoft():
         print "Build platform is Microsoft Visual C++ (MSVC)."
@@ -428,7 +428,7 @@
     if getPlatform() == "darwin":
         commonEnvironment.Append(LIBS=['intl'])
     if getPlatform() == "sunos":
-        commonEnvironment.Append(LIBS=['intl'])    
+        commonEnvironment.Append(LIBS=['intl'])
 else:
     print "CONFIGURATION DECISION: No localisation"
 
@@ -448,18 +448,18 @@
         commonEnvironment.Prepend(CCFLAGS = Split('-O3 -mcpu=%s -mtune=%s' % (cpuType, cpuType)))
     else:
         commonEnvironment.Prepend(CCFLAGS = Split('-O3 -mtune=%s' % (cpuType)))
-     
+
 
 if commonEnvironment['buildRelease'] != '0':
     if compilerMicrosoft():
         commonEnvironment.Append(CCFLAGS = Split('/O2'))
     elif compilerIntel():
         commonEnvironment.Append(CCFLAGS = Split('/O3'))
- 
+
 if commonEnvironment['noDebug'] == '0':
     if compilerGNU() :
         commonEnvironment.Append(CCFLAGS = ['-g'])
-         
+
 if commonEnvironment['useGprof'] == '1':
     commonEnvironment.Append(CCFLAGS = ['-pg'])
     commonEnvironment.Append(CXXFLAGS = ['-pg'])
@@ -483,7 +483,7 @@
 if commonEnvironment['Lib64'] == '1':
     if getPlatform() == 'sunos':
         commonEnvironment.Prepend(LIBPATH = ['.', '#.', '/lib/64', '/usr/lib/64'])
-    else:    
+    else:
         commonEnvironment.Prepend(LIBPATH = ['.', '#.', '/usr/local/lib64'])
 else:
     commonEnvironment.Prepend(LIBPATH = ['.', '#.', '/usr/local/lib'])
@@ -491,7 +491,7 @@
 if commonEnvironment['Word64'] == '1':
     if compilerSun():
         commonEnvironment.Append(CCFLAGS = ['-xcode=pic32'])
-    else:    
+    else:
         commonEnvironment.Append(CCFLAGS = ['-fPIC'])
 
 
@@ -519,7 +519,7 @@
     commonEnvironment.Append(CPPPATH = '/usr/jdk/instances/jdk1.5.0/include')
     if compilerGNU():
         commonEnvironment.Append(CCFLAGS = "-DPIPES")
-        commonEnvironment.Append(LINKFLAGS = ['-Wl,-Bdynamic'])  
+        commonEnvironment.Append(LINKFLAGS = ['-Wl,-Bdynamic'])
 elif getPlatform() == 'darwin':
     commonEnvironment.Append(CCFLAGS = "-DMACOSX")
     commonEnvironment.Append(CPPPATH = '/usr/local/include')
@@ -759,9 +759,9 @@
 gmmFound = configure.CheckHeader("gmm/gmm.h", language = "C++")
 alsaFound = configure.CheckLibWithHeader("asound", "alsa/asoundlib.h", language = "C")
 oscFound = configure.CheckLibWithHeader("lo", "lo/lo.h", language = "C")
-musicXmlFound = configure.CheckLibWithHeader('musicxml2', 'xmlfile.h', 'C++', 'MusicXML2::SXMLFile f = MusicXML2::TXMLFile::create();')
-if musicXmlFound:
-   commonEnvironment.Append(CPPFLAGS = ['-DHAVE_MUSICXML2'])
+#musicXmlFound = configure.CheckLibWithHeader('musicxml2', 'xmlfile.h', 'C++', 'MusicXML2::SXMLFile f = MusicXML2::TXMLFile::create();')
+#if musicXmlFound:
+#   commonEnvironment.Append(CPPFLAGS = ['-DHAVE_MUSICXML2'])
 
 #if not buildOLPC:
 jackFound = configure.CheckHeader("jack/jack.h", language = "C")
@@ -933,38 +933,38 @@
     # These are the Windows system call libraries.
     if compilerGNU():
         csoundWindowsLibraries = Split('''
-advapi32 
-comctl32 
-comdlg32 
-glu32 
-kernel32 
+advapi32
+comctl32
+comdlg32
+glu32
+kernel32
 msvcrt
-odbc32 
-odbccp32 
-ole32 
-oleaut32 
-shell32             
-user32 
-uuid             
-winmm 
-winspool 
-ws2_32 
-wsock32 
-advapi32 
-comctl32 
-comdlg32 
-glu32 
-kernel32 
-odbc32 
-odbccp32 
-ole32 
-oleaut32 
-shell32             
-user32 
-uuid             
-winmm 
-winspool 
-ws2_32 
+odbc32
+odbccp32
+ole32
+oleaut32
+shell32
+user32
+uuid
+winmm
+winspool
+ws2_32
+wsock32
+advapi32
+comctl32
+comdlg32
+glu32
+kernel32
+odbc32
+odbccp32
+ole32
+oleaut32
+shell32
+user32
+uuid
+winmm
+winspool
+ws2_32
 wsock32
 pthread
         ''')
@@ -972,7 +972,7 @@
         csoundWindowsLibraries = Split('''
             kernel32 gdi32 wsock32 ole32 uuid winmm user32.lib ws2_32.lib
             comctl32.lib gdi32.lib comdlg32.lib advapi32.lib shell32.lib
-            ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib 
+            ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib
             kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib
             advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib
             odbc32.lib odbccp32.lib pthread.lib
@@ -1221,7 +1221,7 @@
         if compilerSun():
             tmp = tmp + ['-soname=%s' % libName2]
         else:
-            tmp = tmp + ['-Wl,-soname=%s' % libName2]        
+            tmp = tmp + ['-Wl,-soname=%s' % libName2]
         cflags = csoundDynamicLibraryEnvironment['CCFLAGS']
         if configure.CheckGcc4():
             cflags   += ['-fvisibility=hidden']
@@ -1406,7 +1406,7 @@
         soflag = [ '-Wl,-soname=%s' % soname ]
         extraflag = ['-L.']
         csnd = csoundInterfacesEnvironment.SharedLibrary(
-            soname, csoundInterfacesSources, 
+            soname, csoundInterfacesSources,
             SHLINKFLAGS = linkflags+soflag+extraflag,
             SHLIBPREFIX = '', SHLIBSUFFIX = '')
     else:
@@ -1592,7 +1592,7 @@
     Opcodes/spat3d.c        Opcodes/syncgrain.c     Opcodes/ugens7.c
     Opcodes/ugens9.c        Opcodes/ugensa.c        Opcodes/uggab.c
     Opcodes/ugmoss.c        Opcodes/ugnorman.c      Opcodes/ugsc.c
-    Opcodes/wave-terrain.c  Opcodes/stdopcod.c      
+    Opcodes/wave-terrain.c  Opcodes/stdopcod.c
     '''))
 
 if not buildOLPC and (getPlatform() == 'linux' or getPlatform() == 'darwin'):
@@ -1773,7 +1773,7 @@
         widgetsEnvironment.Append(LIBS = ['stdc++', 'pthread', 'm'])
     elif compilerSun():
         widgetsEnvironment.ParseConfig('fltk-config --use-images --cflags --cxxflags --ldflags')
-        widgetsEnvironment.Append(LIBS = ['pthread', 'm'])         
+        widgetsEnvironment.Append(LIBS = ['pthread', 'm'])
     elif getPlatform() == 'win32':
         if compilerGNU():
             widgetsEnvironment.Append(LIBS = ['stdc++', 'supc++'])
@@ -2253,7 +2253,7 @@
         csound5GUIEnvironment.Append(LIBS = ['stdc++', 'pthread', 'm'])
     elif compilerSun():
         csound5GUIEnvironment.ParseConfig('fltk-config --use-images --cflags --cxxflags --ldflags')
-        csound5GUIEnvironment.Append(LIBS = ['pthread', 'm'])    
+        csound5GUIEnvironment.Append(LIBS = ['pthread', 'm'])
     elif getPlatform() == 'win32':
         if compilerGNU():
             csound5GUIEnvironment.Append(LIBS = ['stdc++', 'supc++'])
@@ -2367,9 +2367,9 @@
            acEnvironment.Prepend(LIBS = 'musicxml2')
         if getPlatform() != 'win32':
            acEnvironment.Prepend(LIBS = csnd)
-        else:  
+        else:
 	   acEnvironment.Prepend(LIBS = 'csnd')
-    else: 
+    else:
         acEnvironment.Prepend(LIBS = '_csnd')
     acEnvironment.Append(LINKFLAGS = libCsoundLinkFlags)
     if not getPlatform() == 'darwin' or commonEnvironment['dynamicCsoundLibrary']== '0':
@@ -2490,7 +2490,7 @@
        Depends(CsoundAclModule, luaWrapper)
        Depends(CsoundAclModule, csoundac)
        Depends(CsoundAclModule, csnd)
-  
+
 
 # Build CsoundVST
 
