# This is the patch that has been applied on the original 
# pyduino library to produce this version of the library

--- pyduino.py	2010-05-10 21:49:06.000000000 +0200
+++ pyduino-new.py	2010-05-10 21:55:39.000000000 +0200
@@ -2,6 +2,7 @@
 
 """pyduino - A python library to interface with the firmata arduino firmware.
 Copyright (C) 2007 Joe Turner <orphansandoligarchs@gmail.com>
+Modified by Ferrazzo Riccardo <f.riccardo87@gmail.com>
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
@@ -38,6 +39,8 @@
 REPORT_VERSION = 0xF9 # report firmware version
 SYSTEM_RESET = 0xFF # reset from MIDI
 
+QUERY_FIRMWARE = 0x79 # report firmware name and version
+
 # Pin modes
 UNAVAILABLE = -1
 DIGITAL_INPUT = 0
@@ -51,9 +54,15 @@
     """Base class for the arduino board"""
 
     def __init__(self, port):
-        self.sp = serial.Serial(port, 115200, timeout=0.02)
+        self.sp = serial.Serial(port, 57600, timeout=1.5)
         # Allow 2 secs for Diecimila auto-reset to happen
         time.sleep(2)
+        
+        # Empty all default messages sent wen connecting to the arduino
+        while True:
+            x = self.sp.read()
+            if ord(x) == "":
+                break
 
         self.analog = []
         for i in range(6):
@@ -78,8 +87,9 @@
         self.digital += self.digital_ports[1].pins[:6]
         
         # Obtain firmata version
-        self.firmata_version = None
-        self.sp.write(chr(REPORT_VERSION))
+        self.firmware_version = None
+        self.firmware_name = ""
+        self._sysex_message(QUERY_FIRMWARE)
         self.iterate()
 
     def __str__(self):
@@ -121,13 +131,29 @@
                 msb = ord(msb)
                 value = float(msb << 7 | lsb) / 1023
                 self.analog[pin_number].set_value(value)
-        elif data == REPORT_VERSION:
-            minor, major = self.sp.read(2)
-            self.firmata_version = (ord(major), ord(minor))
+        elif data == START_SYSEX:
+            # Parse sysex messages
+            data = self.sp.read()
+            if ord(data) == QUERY_FIRMWARE:
+                print "firmware"
+                major, minor = self.sp.read(2)
+                self.firmware_version = (ord(major), ord(minor))
+                while True:
+                    char = self.sp.read()
+                    if ord(char) == END_SYSEX:
+                        break
+                    self.firmware_name = self.firmware_name + char
 
     def get_firmata_version(self):
         """Return a (major, minor) version tuple for the firmata firmware"""
-        return self.firmata_version
+        return self.firmware_version
+        
+    def get_firmware_name(self):
+        """Return the firmware name as it is in the arduino .pde file"""
+        return self.firmware_name
+        
+    def _sysex_message(self, message):
+        self.sp.write(chr(START_SYSEX)+chr(message)+chr(END_SYSEX))
 
     def exit(self):
         """Exit the application cleanly"""
